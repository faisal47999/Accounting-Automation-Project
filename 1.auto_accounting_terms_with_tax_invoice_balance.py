# -*- coding: utf-8 -*-
"""Accounting Automation Project! ðŸš€ .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Buy8Ng2qeI2GORgCT5veEYlu5dm_ywJr

**Accounting Automation Project! ðŸš€**
"""

import pandas as pd
import plotly.graph_objects as go
!pip install reportlab
from plotly.subplots import make_subplots
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import letter
from datetime import datetime

def analyze_accounting_data(file_path):
    try:
        # CSV file padho
        data = pd.read_csv(file_path)

        # Accounting categories ke liye dictionary
        accounting_totals = {
            "Income": 0,
            "Expense": 0,
            "Profit": 0,
            "Capital": 0,
            "Assets": 0,
            "Liabilities": 0,
            "Tax": 0
        }

        # Numeric aur categorical columns alag karo
        numeric_cols = data.select_dtypes(include=['int64', 'float64']).columns
        categorical_cols = data.select_dtypes(include=['object']).columns

        # Amount column detect karo
        amount_col = None
        for col in numeric_cols:
            if any(keyword in col.lower() for keyword in ["amount", "value", "total", "price"]):
                amount_col = col
                break
        if not amount_col and numeric_cols.any():
            amount_col = numeric_cols[0]

        # Category column detect karo
        category_col = None
        for col in categorical_cols:
            if any(keyword in col.lower() for keyword in ["category", "type", "description"]):
                category_col = col
                break
        if not category_col and categorical_cols.any():
            category_col = categorical_cols[0]

        # Tax column detect karo
        tax_col = None
        for col in numeric_cols:
            if "tax" in col.lower():
                tax_col = col
                break

        # Agar amount ya category nahi mila
        if not amount_col or not category_col:
            print("Error: Amount ya Category column nahi mila.")
            return None

        # Transactions ko categorize karo
        for _, row in data.iterrows():
            amount = row[amount_col]
            category = str(row[category_col]).lower()

            if any(keyword in category for keyword in ["sale", "income", "revenue"]):
                accounting_totals["Income"] += amount
            elif any(keyword in category for keyword in ["expense", "cost", "bill", "salary", "rent"]):
                accounting_totals["Expense"] += amount
            elif any(keyword in category for keyword in ["capital", "investment", "fund"]):
                accounting_totals["Capital"] += amount
            elif any(keyword in category for keyword in ["asset", "inventory", "equipment"]):
                accounting_totals["Assets"] += amount
            elif any(keyword in category for keyword in ["liability", "loan", "debt"]):
                accounting_totals["Liabilities"] += amount

        # Tax total nikalo
        if tax_col:
            accounting_totals["Tax"] = data[tax_col].sum()

        # Profit calculate karo
        accounting_totals["Profit"] = accounting_totals["Income"] - accounting_totals["Expense"]

        # Results print karo
        print("=== Accounting Summary ===")
        for category, total in accounting_totals.items():
            print(f"{category}: PKR {total}")

        # Plotly graphs
        # 1. Bar Chart with Labels in Millions
        fig1 = go.Figure(data=[
            go.Bar(name="Income", x=["Income"], y=[accounting_totals["Income"]], marker_color="green", text=[f"{accounting_totals['Income']/1000000:.2f}M"], textposition="auto"),
            go.Bar(name="Expense", x=["Expense"], y=[accounting_totals["Expense"]], marker_color="red", text=[f"{accounting_totals['Expense']/1000000:.2f}M"], textposition="auto"),
            go.Bar(name="Profit", x=["Profit"], y=[accounting_totals["Profit"]], marker_color="blue", text=[f"{accounting_totals['Profit']/1000000:.2f}M"], textposition="auto"),
            go.Bar(name="Capital", x=["Capital"], y=[accounting_totals["Capital"]], marker_color="purple", text=[f"{accounting_totals['Capital']/1000000:.2f}M"], textposition="auto"),
            go.Bar(name="Assets", x=["Assets"], y=[accounting_totals["Assets"]], marker_color="orange", text=[f"{accounting_totals['Assets']/1000000:.2f}M"], textposition="auto"),
            go.Bar(name="Liabilities", x=["Liabilities"], y=[accounting_totals["Liabilities"]], marker_color="gray", text=[f"{accounting_totals['Liabilities']/1000000:.2f}M"], textposition="auto"),
            go.Bar(name="Tax", x=["Tax"], y=[accounting_totals["Tax"]], marker_color="yellow", text=[f"{accounting_totals['Tax']/1000000:.2f}M"], textposition="auto")
        ])
        fig1.update_layout(
            title="Accounting Categories Bar Chart",
            xaxis_title="Category",
            yaxis_title="Amount (PKR)",
            barmode="group"
        )

        # 2. Pie Chart
        fig2 = go.Figure(data=[
            go.Pie(
                labels=list(accounting_totals.keys()),
                values=[max(0, accounting_totals[cat]) for cat in accounting_totals],
                marker_colors=["green", "red", "blue", "purple", "orange", "gray", "yellow"],
                textinfo="label+percent",
                hoverinfo="label+value"
            )
        ])
        fig2.update_layout(title="Accounting Categories Percentage Breakdown")

        # Dono graphs dikhao
        fig1.show()
        fig2.show()

        # Feature 1: Invoice Generator
        def generate_invoice(transaction):
            invoice_id = transaction.get("Transaction_ID", "TXN-UNKNOWN")
            customer = transaction.get("Customer_Name", "Unknown")
            product = transaction.get("Product_Service", "Unknown")
            amount = transaction.get("Amount", 0)
            tax = transaction.get("Tax", 0)
            date = transaction.get("Date", "Unknown")

            pdf_file = f"invoice_{invoice_id}.pdf"
            c = canvas.Canvas(pdf_file, pagesize=letter)
            c.drawString(100, 750, "Invoice")
            c.drawString(100, 730, f"Invoice ID: {invoice_id}")
            c.drawString(100, 710, f"Customer: {customer}")
            c.drawString(100, 690, f"Date: {date}")
            c.drawString(100, 670, f"Product/Service: {product}")
            c.drawString(100, 650, f"Amount: PKR {amount}")
            c.drawString(100, 630, f"Tax (17%): PKR {tax}")
            c.drawString(100, 610, f"Total: PKR {amount + tax}")
            c.save()
            print(f"Invoice generated: {pdf_file}")

        # Income transactions ke liye invoices banao (pehle 3 ke liye sample)
        income_transactions = data[data[category_col].str.lower().str.contains("sale|income|revenue", na=False)].head(3)
        for _, trans in income_transactions.iterrows():
            generate_invoice(trans)

        # Feature 2: Balance Sheet
        def generate_balance_sheet(totals):
            print("\n=== Balance Sheet ===")
            print("Assets:")
            print(f"  Total Assets: PKR {totals['Assets']}")
            print("Liabilities:")
            print(f"  Total Liabilities: PKR {totals['Liabilities']}")
            print("Equity:")
            equity = totals["Capital"] + totals["Profit"]
            print(f"  Capital: PKR {totals['Capital']}")
            print(f"  Retained Earnings (Profit): PKR {totals['Profit']}")
            print(f"  Total Equity: PKR {equity}")
            print(f"Balance Check: Assets (PKR {totals['Assets']}) = Liabilities + Equity (PKR {totals['Liabilities'] + equity})")

        generate_balance_sheet(accounting_totals)

        return accounting_totals

    except Exception as e:
        print(f"Error: {str(e)}")
        return None

# Script ko run karo
if __name__ == "__main__":
    file_path = "detailed_transactions.csv"  # Apki CSV file ka naam
    analyze_accounting_data(file_path)